<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>文章 on 小牛写字的地方</title><link>http://xuxinhang.github.io/posts/</link><description>Recent content in 文章 on 小牛写字的地方</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 04 Apr 2021 13:10:00 +0000</lastBuildDate><atom:link href="http://xuxinhang.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 TeX 盒子的两个例子</title><link>http://xuxinhang.github.io/posts/%E4%BD%BF%E7%94%A8tex%E7%9B%92%E5%AD%90%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%BE%8B%E5%AD%90/</link><pubDate>Sun, 04 Apr 2021 13:10:00 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E4%BD%BF%E7%94%A8tex%E7%9B%92%E5%AD%90%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%BE%8B%E5%AD%90/</guid><description>&lt;p>最近要实现几个效果装饰自己的LaTeX文档，决定自己用 TeX 的盒子实现这些效果，顺便也从盒子入手探索一下纯 TeX 的世界。因为发现少有人编写使用 TeX 盒子的实际例子或入门指导，所以在捣鼓出来这两个东西之后想与大家一起分享，起到抛砖引玉的作用。&lt;/p>
&lt;p>你可能经常听到这三个词——Tex、Plain Tex、LaTeX，它们之间的区别联系&lt;a href="https://tex.stackexchange.com/questions/97520/what-is-plain-tex">已经有人讲得很清楚了&lt;/a>。&lt;!-- raw HTML omitted -->简单来说，TeX 只定义了最最基础的“原语”，而 Plain TeX 基于TeX的原语定义了方便日常使用的宏，LaTeX 则在 Plain TeX 基础上更进一步。大多数声称只使用 TeX 的人，实际上会使用不少 Plain TeX 中的宏。不过在这篇文章里，我是仅仅使用 TeX 的原语来创建盒子的。&lt;/p></description></item><item><title>杂谈：怎样整理各式各样的个人文件？</title><link>http://xuxinhang.github.io/posts/%E6%9D%82%E8%B0%88%E6%80%8E%E6%A0%B7%E6%95%B4%E7%90%86%E5%90%84%E5%BC%8F%E5%90%84%E6%A0%B7%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%96%87%E4%BB%B6/</link><pubDate>Wed, 24 Feb 2021 23:11:38 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E6%9D%82%E8%B0%88%E6%80%8E%E6%A0%B7%E6%95%B4%E7%90%86%E5%90%84%E5%BC%8F%E5%90%84%E6%A0%B7%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%96%87%E4%BB%B6/</guid><description>一些小经验与读者分享。</description></item><item><title>怎样舒适地使用 Vim 码字写文章</title><link>http://xuxinhang.github.io/posts/%E6%80%8E%E6%A0%B7%E8%88%92%E9%80%82%E5%9C%B0%E4%BD%BF%E7%94%A8vim%E7%A0%81%E5%AD%97%E5%86%99%E6%96%87%E7%AB%A0/</link><pubDate>Sun, 28 Jun 2020 19:39:00 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E6%80%8E%E6%A0%B7%E8%88%92%E9%80%82%E5%9C%B0%E4%BD%BF%E7%94%A8vim%E7%A0%81%E5%AD%97%E5%86%99%E6%96%87%E7%AB%A0/</guid><description>&lt;p>在 Vim 中使用 LaTeX 或者 Markdown 码字总会感到两种痛苦：一是开启自动折行后一个自然段的东西显示为好几行，可敲 &lt;code>j&lt;/code> &lt;code>k&lt;/code> 会让光标直接跳到下一个自然段；二是写码汉字的时候输入法总是要不停地切换——插入模式下写文章要用中文输入法码字，回到普通模式还得切换回英文敲命令。&lt;/p>
&lt;blockquote>
&lt;p>提出这个问题是因为这段时间一直在使用 LaTeX 写中文文章，以上两个问题相当影响效率。我想很多人也遇到了这个问题，所以在这里分享一下解决方案。
另外，上一篇文章写到了怎样使用 Vim 愉快地写 LaTeX，这一篇也算是对前面文章的补充。
当然，你也可以把这里的方法应用到任何需要使用 Vim 写大量中文的地方。&lt;/p>
&lt;/blockquote>
&lt;p>毗邻：LaTeX 入门小记：Vim + Vimtex + LaTeX 初体验​zhuanlan.zhihu.com&lt;img src="v2-0c924e835b6c9ccc4888771e4c41a38f_180x120.jpg" alt="图标">&lt;/p>
&lt;p>所以，是时候解决这两个问题了！&lt;/p></description></item><item><title>LaTeX 入门小记：Vim + Vimtex + LaTeX 初体验</title><link>http://xuxinhang.github.io/posts/latex%E5%85%A5%E9%97%A8%E5%B0%8F%E8%AE%B0vim+vimtex+latex%E5%88%9D%E4%BD%93%E9%AA%8C/</link><pubDate>Mon, 25 Nov 2019 19:15:00 +0000</pubDate><guid>http://xuxinhang.github.io/posts/latex%E5%85%A5%E9%97%A8%E5%B0%8F%E8%AE%B0vim+vimtex+latex%E5%88%9D%E4%BD%93%E9%AA%8C/</guid><description>&lt;p>前几天写作业的时候突发奇想，想用传说中的LaTeX写一份作业交上去，正好前几天也被迷一样的Word搞得苦不堪言。&lt;/p>
&lt;p>之前收藏过一篇来自外国小哥的文章
&lt;a href="https://castel.dev/post/lecture-notes-1/">How I&amp;rsquo;m able to take notes in mathematics lectures using LaTeX and Vim​&lt;/a>&lt;/p>
&lt;p>知乎上也有相关的中文介绍
&lt;a href="https://zhuanlan.zhihu.com/p/61036165">机器之心：世界上最好的编辑器Vim：1700多页数学笔记是如何实时完成的&lt;/a>&lt;/p>
&lt;p>就以这篇文章为起点，我在一台Windows电脑上开始了 Vim + LaTeX 的踩坑旅程……&lt;/p></description></item><item><title>用纯 CSS 实现镂空效果</title><link>http://xuxinhang.github.io/posts/%E7%94%A8%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E9%95%82%E7%A9%BA%E6%95%88%E6%9E%9C/</link><pubDate>Fri, 22 Feb 2019 23:20:51 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E7%94%A8%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E9%95%82%E7%A9%BA%E6%95%88%E6%9E%9C/</guid><description>&lt;blockquote>
&lt;p>UPDATE 2/26&lt;/p>
&lt;p>现在为示例 CodePen 添加了厂商前缀，并在正文中添加了兼容性提示。感谢评论区的各位。&lt;/p>
&lt;/blockquote>
&lt;p>近来研究了一下镂空效果。&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>使用 Heroku 或 OpenShift 搭建自己的免费科学上网 V2Ray 服务</title><link>http://xuxinhang.github.io/posts/%E4%BD%BF%E7%94%A8heroku%E6%88%96openshift%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91v2ray%E6%9C%8D%E5%8A%A1/</link><pubDate>Tue, 12 Feb 2019 22:16:40 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E4%BD%BF%E7%94%A8heroku%E6%88%96openshift%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91v2ray%E6%9C%8D%E5%8A%A1/</guid><description>使用 Heroku 或 OpenShift 搭建自己的免费科学上网 V2Ray 服务 选择一款墙外的云服务 如果有点钱：买一个云 这里还是推荐使用付费的云服务器，因为它的性能更加稳定，而且有良好的技术支持。只要所选的服务器位于墙外的网络上就可以。
蓐羊毛：使用免费云 如果不想出这笔钱，也可选择境外的免费云服务。这里选择的是 Heroku 和 OpenShift，而且也不需要信用卡认证。这两个网站的登录、注册和管理页面需要翻墙才能进入。所以，需要提前备一个翻墙服务，直到完成服务器的部署。
免费的服务一般速度会比较慢，延迟高，而且也不稳定。如果你需要快速、更稳定的翻墙服务就不要在这上面打主意了，买一个靠谱的云服务吧！
使用 Heroku 进入 Heroku，注册一个账户，登录。可能需要翻墙才能进入注册页面。
进入管理页面， New -&amp;gt; Create New App 选择服务器位置，选择 &amp;ldquo;Europe&amp;rdquo; 还是 &amp;ldquo;US&amp;rdquo; 看自己，可以都试一试。
进入新建的 App，“Settings”中，添加一个环境变量 “V2RAY_CONFIG_JSON”，内容为你的 JSON 配置内容。（这里的 value 框可以输入多行，这个设计很不错！）
进入“Deploy”，选择使用“Heroku CLI”，照网页上的指导进行操作，完成部署。
另外也有几个命令值得关注：
heroku git:remote - 添加 remote 到现有的仓库 Link
&amp;hellip;
更详细的步骤可见 Deploy the app
一般来说，只要一 push，部署过程就会自动执行。
服务端配置示例 { &amp;#34;log&amp;#34;: { &amp;#34;error&amp;#34;: &amp;#34;.</description></item><item><title>剖析 HTTPS 的设计思路</title><link>http://xuxinhang.github.io/posts/%E5%89%96%E6%9E%90-https-%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/</link><pubDate>Fri, 11 Jan 2019 23:13:38 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E5%89%96%E6%9E%90-https-%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/</guid><description>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer ，安全的超文本传输协议），是以安全为目标的HTTP通道。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。这个系统的最初研发由 Netscape 进行。
如今，HTTPS 已经渐渐成为主流，很多大型网站都已经全站 HTTPS 化。那么有了 HTTP 后为什么还需要有 HTTPS 呢？——为了解决 HTTP 的不足。
HTTP 的不足之处
通信内容使用明文——内容可能被窃听 不验证通信方的身份——可能遭遇伪装 无法验证报文的完整性——报文有可能已遭篡改 现在来看看一般的明文通信都存在什么问题。
使用明文传输内容存在的问题 在理想的信息流动情况下，信息能够安全达到目的地且未受到任何攻击。
我们平时生活中所说的“攻击”，更多地有”主动“的意义。但是这里的攻击，囊括了主动和被动两层意义。根据 ITU-T 的 X.800 推荐标准（OSI 安全框架），攻击分为以下几类：
被动攻击 窃听：一个非授权方介入系统的攻击，获取了传输的信息，破坏保密性。 流量攻击：监听流量来判断通信的性质。 主动攻击 伪装/冒充：个实体假装成另外一个实体。 伪造/篡改：将伪造的客体插入系统中，破坏真实性。 重放：获取有效数据段以重播的方式获取对方信任。 DoS / DDoS：导致合法用户不能够访问正常网络服务的行为都算是拒绝服务攻击。 一般的明文网络访问，无法防止上面所述的攻击方式。通过应用密码学的知识，一般可以阻止上面多数的攻击。（但是密码学对流量攻击、重放和 (D)DoS 还做不了太多。防止重放攻击还需要在更高的应用层做一些处理。）
下面，我们用密码学来解决它可以解决的风险：
窃听风险：黑客可以获知通信内容。 —— 保证数据的隐私性 篡改风险：黑客可以修改通信内容。 —— 保证数据的完整性 冒充风险：黑客可以冒充他人身份参与通信。 —— 保证身份正确。 解决窃听风险：加密 1、对称加密 。有流式、分组两种，加密和解密都是使用的同一个密钥。 例如：DES、AES 等</description></item><item><title>Pro Git Tips</title><link>http://xuxinhang.github.io/posts/pro-git-tips/</link><pubDate>Wed, 12 Dec 2018 22:16:40 +0000</pubDate><guid>http://xuxinhang.github.io/posts/pro-git-tips/</guid><description>&lt;h1 id="tips--summaries-for-pro-git">Tips &amp;amp; Summaries for &lt;em>Pro Git&lt;/em>&lt;/h1>
&lt;p>The notes for &lt;em>Pro Git&lt;/em>. Written By Cattle with :heart:&lt;/p></description></item><item><title>管理系统的登录控制？手写一个发布订阅模型！</title><link>http://xuxinhang.github.io/posts/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%99%BB%E5%BD%95%E6%8E%A7%E5%88%B6%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B/</link><pubDate>Wed, 17 Oct 2018 23:10:16 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%99%BB%E5%BD%95%E6%8E%A7%E5%88%B6%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>最近做了一个后台的项目，既然是后台管理系统，登录的控制自然是少不了的。&lt;/p>
&lt;p>接到需求——后台系统！花了几乎半天搞出来了Webpack配置、搞出来了React Router、搞出来了 React 代码基本的结构，下一步就是搞所谓的“登录逻辑”了。&lt;/p>
&lt;p>正好 React v16 大变，而自己最近又有些时候没写过React了，便不妨借这次机会熟悉一下React的新API吧！听说React新出的 Context API 可以“取代Redux”，那这次登录逻辑就用 Context 写吧！&lt;/p></description></item><item><title>关于Promise的几个Tips</title><link>http://xuxinhang.github.io/posts/%E5%85%B3%E4%BA%8Epromise%E7%9A%84%E5%87%A0%E4%B8%AAtips/</link><pubDate>Fri, 18 May 2018 12:54:08 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E5%85%B3%E4%BA%8Epromise%E7%9A%84%E5%87%A0%E4%B8%AAtips/</guid><description>天天用的 Promise，你真的了解它吗？</description></item><item><title>Windows-Git中OpenSSH无ssh-agent多密钥配置小记</title><link>http://xuxinhang.github.io/posts/windows-git%E4%B8%ADopenssh%E6%97%A0ssh-agent%E5%A4%9A%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/</link><pubDate>Sat, 17 Mar 2018 22:34:56 +0000</pubDate><guid>http://xuxinhang.github.io/posts/windows-git%E4%B8%ADopenssh%E6%97%A0ssh-agent%E5%A4%9A%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE%E5%B0%8F%E8%AE%B0/</guid><description>最近Git环境崩了，只好重新配置一下。笔者使用的是Windows环境，众所周知，Windows下面配置各种环境都很坑的，Git也不例外。我感觉最大的坑就是SSH的问题。Windows下面 ssh-agent 不自动启动，不长驻内存。当然，我可以强行设置一波系统自启动，也可以通过配置使得在启动 Git Bash 的时候先静默执行agent再进入环境——虽然都可以解决问题，但是总是感觉不舒服。此外，我手里也有多个私钥，在使用Git时，我需要把这些私钥都载入。
为了舒服地使用Git，当然要义无反顾地踏上配置之路。
在正式开始之前，先看看笔者之前的操作是什么样子的。
原先的方法：手动执行命令 打开终端，Push/Pull之前，需要手动执行命令后台启动ssh-agent，并向其中添加密钥。【】
# 静默启动 ssh-agent exec ssh-agent bash eval ssh-agent -s # 添加密钥 ssh-add &amp;#34;C:\Users\Administrator\.ssh\my_first_private_key&amp;#34; # 你也可以添加更多的 ssh-add &amp;#34;C:\Users\Administrator\.ssh\my_second_private_key&amp;#34; 如此一番操作以后SSH密钥才可以使用——实在太麻烦了！
Open SSH 命令家族 什么是ssh-agent OpenSSH 文档中是这么解释的：
ssh-agent 是一个保存用于公钥认证的私钥的程序。所有其他窗口或程序都作为 ssh-agent 程序的客户端启动。
说白了，它就是一个专门用于保管密钥的程序嘛。
ssh 命令 ssh应该是最常用的一条命令了。它提供了很多参数，但是有一个参数引起了我的注意。
-i identity_file Selects a file from which the identity (private key) for public key authentication is read. The default is ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 and ~/.ssh/id_rsa. Identity files may also be specified on a per-host basis in the configuration file.</description></item><item><title>CSS 视觉格式化模型 Visual Formatting Model</title><link>http://xuxinhang.github.io/posts/css-%E8%A7%86%E8%A7%89%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A8%A1%E5%9E%8B-visual-formatting-model/</link><pubDate>Sun, 18 Feb 2018 12:52:09 +0000</pubDate><guid>http://xuxinhang.github.io/posts/css-%E8%A7%86%E8%A7%89%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A8%A1%E5%9E%8B-visual-formatting-model/</guid><description>&lt;p>&lt;img src="7e8f35beff7b07022095b9bc4b634416.png" alt="img">&lt;/p>
&lt;h1 id="whats-css-visual-formatting-model">What’s CSS Visual Formatting Model&lt;/h1>
&lt;ul>
&lt;li>视觉格式化模型(visual formatting model)是用来处理文档并将它显示在视觉媒体上的机制。&lt;/li>
&lt;li>根据CSS盒模型，浏览器为文档元素生成盒子(Box)。视觉格式化模型就是文档里的“盒子布局呈现的一种规则”。&lt;/li>
&lt;/ul></description></item><item><title>指南：如何让Webpack包加载得更快</title><link>http://xuxinhang.github.io/posts/%E6%8C%87%E5%8D%97%E5%A6%82%E4%BD%95%E8%AE%A9webpack%E5%8C%85%E5%8A%A0%E8%BD%BD%E5%BE%97%E6%9B%B4%E5%BF%AB/</link><pubDate>Wed, 01 Mar 2017 12:46:23 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E6%8C%87%E5%8D%97%E5%A6%82%E4%BD%95%E8%AE%A9webpack%E5%8C%85%E5%8A%A0%E8%BD%BD%E5%BE%97%E6%9B%B4%E5%BF%AB/</guid><description>&lt;p>&lt;img src="4ab27a9426ce3fc36133257bec467464.png" alt="img">&lt;/p>
&lt;h1 id="我们为什么需要加载更快的包">我们为什么需要加载更快的包&lt;/h1>
&lt;ol>
&lt;li>减少首屏加载时间。 在目前国内的网络条件下，通常一个网站，如果“首屏时间”在2秒以内是比较优秀的，5秒以内用户可以接受，10秒以上就不可容忍了。&lt;/li>
&lt;li>减小打包体积。 并不是每个地方都有4G（去过东图书库吗）&lt;/li>
&lt;/ol>
&lt;h1 id="思路">思路&lt;/h1>
&lt;p>&lt;img src="8bf8f21071a2e1dd6a43796444548325.png" alt="img">&lt;/p></description></item><item><title>说不尽的FlexBox：深入探究</title><link>http://xuxinhang.github.io/posts/%E8%AF%B4%E4%B8%8D%E5%B0%BD%E7%9A%84flexbox%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6/</link><pubDate>Sun, 01 Jan 2017 12:48:17 +0000</pubDate><guid>http://xuxinhang.github.io/posts/%E8%AF%B4%E4%B8%8D%E5%B0%BD%E7%9A%84flexbox%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6/</guid><description>&lt;p>&lt;strong>折腾Flexbox的总结&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Demo演示文件请移步文末&lt;/strong>&lt;/p>
&lt;h1 id="缘起">缘起&lt;/h1>
&lt;p>说来惭愧，我是在几个星期前因为项目的原因才开始大规模地使用flex布局。flex设计的非常巧妙，背后的原理也比较复杂（看看下面的那张图就知道了）。我找了些网上的资料，自己研究了一下flex布局在各种情况下的表现。对现有的结论做出了验证，自己也有了些新结论。学习CSS这个及其灵活的玩意，我们不仅要懂是什么，还要知道为什么。&lt;/p></description></item></channel></rss>